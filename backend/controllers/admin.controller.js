const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient();

const TABLE = 'admins';

// üì• L·∫•y to√†n b·ªô quy·ªÅn c·ªßa t·∫•t c·∫£ users (‚ö†Ô∏è ch·ªâ d√πng ƒë·ªÉ debug nh·ªè, n√™n d√πng query v·ªõi PK n·∫øu c·∫ßn)
exports.getAllAdmins = async (req, res) => {
  try {
    const result = await docClient.scan({ TableName: TABLE }).promise();
    res.json(result.Items);
  } catch (err) {
    console.error('‚ùå L·ªói khi l·∫•y danh s√°ch admin:', err);
    res.status(500).json({ error: 'L·ªói m√°y ch·ªß khi l·∫•y danh s√°ch quy·ªÅn' });
  }
};

// ‚ûï T·∫°o ho·∫∑c c·∫≠p nh·∫≠t quy·ªÅn c·ªßa 1 user cho 1 unit
exports.createOrUpdateAdmin = async (req, res) => {
  const { user_code, unit_code, permissions } = req.body;

  if (!user_code || !unit_code || !permissions) {
    return res.status(400).json({ error: 'Thi·∫øu user_code, unit_code ho·∫∑c permissions' });
  }

  const item = {
    user_code,     // Partition Key
    unit_code,     // Sort Key
    permissions,   // Array of strings
  };

  const params = {
    TableName: TABLE,
    Item: item,
  };

  try {
    await docClient.put(params).promise();
    res.json({ message: 'ƒê√£ c·∫•p/c·∫≠p nh·∫≠t quy·ªÅn th√†nh c√¥ng', item });
  } catch (err) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t quy·ªÅn:', err);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t quy·ªÅn' });
  }
};

// üóëÔ∏è Xo√° quy·ªÅn c·ªßa 1 user trong 1 ƒë∆°n v·ªã c·ª• th·ªÉ
exports.deleteAdmin = async (req, res) => {
  const { user_code, unit_code } = req.params;

  if (!user_code || !unit_code) {
    return res.status(400).json({ error: 'Thi·∫øu user_code ho·∫∑c unit_code ƒë·ªÉ xo√°' });
  }

  const params = {
    TableName: TABLE,
    Key: {
      user_code,   // Partition Key
      unit_code,   // Sort Key
    },
  };

  try {
    await docClient.delete(params).promise();
    res.json({ message: `ƒê√£ xo√° quy·ªÅn c·ªßa ${user_code} t·∫°i ƒë∆°n v·ªã ${unit_code}` });
  } catch (err) {
    console.error('‚ùå L·ªói khi xo√° quy·ªÅn:', err);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ xo√° quy·ªÅn ng∆∞·ªùi d√πng' });
  }
};
