// controllers/user.controller.js

const AWS = require('aws-sdk');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

const docClient = new AWS.DynamoDB.DocumentClient();
const TABLE = 'users';
const USERS_TABLE = 'users';
const APPROVE_TABLE = 'graduation_approved'
// =================== AUTH ===================

// ƒêƒÉng nh·∫≠p
exports.login = async (req, res) => {
  const { user_code, password } = req.body;

  if (!user_code || !password) {
    return res.status(400).json({ error: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin' });
  }

  try {
    const data = await docClient.get({ TableName: TABLE, Key: { user_code } }).promise();
    const user = data.Item;

    if (!user) return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(401).json({ error: 'Sai m·∫≠t kh·∫©u' });

    const token = jwt.sign(
      { user_code: user.user_code, role: user.role },
      process.env.JWT_SECRET || 'supersecret123',
      { expiresIn: '2h' }
    );

    res.json({
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      token,
      user: {
        user_code: user.user_code,
        full_name: user.full_name,
        email: user.email,
        role: user.role,
        avatar_url: user.avatar_url
      }
    });
  } catch (err) {
    console.error('L·ªói login:', err);
    res.status(500).json({ error: 'L·ªói ƒëƒÉng nh·∫≠p' });
  }
};

// L·∫•y th√¥ng tin t·ª´ token
exports.getCurrentUser = async (req, res) => {
  const { user_code } = req.user;

  try {
    const data = await docClient.get({ TableName: TABLE, Key: { user_code } }).promise();
    if (!data.Item) return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

    const { password, ...userInfo } = data.Item;
    res.json(userInfo);
  } catch (err) {
    res.status(500).json({ error: 'L·ªói truy v·∫•n ng∆∞·ªùi d√πng' });
  }
};

// =================== USERS CRUD ===================

// T·∫°o ng∆∞·ªùi d√πng
exports.createUser =  async (req, res) => {
  const { user_code, graduation_id, password, avatar_url } = req.body;

  if (!user_code || !graduation_id || !password) {
    return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc' });
  }

  try {
    // 1. Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existing = await docClient.get({
      TableName: USERS_TABLE,
      Key: { user_code }
    }).promise();

    if (existing.Item) {
      return res.status(409).json({ error: 'T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i' });
    }

    // 2. Ki·ªÉm tra user_code + graduation_id c√≥ trong b·∫£ng APPROVE kh√¥ng
    const approveCheck = await docClient.get({
      TableName: APPROVE_TABLE,
      Key: {
        user_code,
        graduation_id: Number(graduation_id)
      }
    }).promise();

    const approveItem = approveCheck.Item;
    if (!approveItem) {
      return res.status(403).json({ error: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin x√©t duy·ªát t∆∞∆°ng ·ª©ng' });
    }

    // 3. M√£ h√≥a m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);

    // 4. T·∫°o user m·ªõi t·ª´ th√¥ng tin trong b·∫£ng approve
    const newUser = {
      user_code,
      password: hashedPassword,
      avatar_url: avatar_url || null,
      email: approveItem.email || '',
      full_name: approveItem.full_name || '',
      unit_code: approveItem.unit_code || '',
      role: 'student',
      created_at: new Date().toISOString(),
    };

    await docClient.put({
      TableName: USERS_TABLE,
      Item: newUser,
    }).promise();

    res.json({ message: 'T·∫°o t√†i kho·∫£n th√†nh c√¥ng', user_code });
  } catch (err) {
    console.error('L·ªói t·∫°o user:', err);
    res.status(500).json({ error: 'L·ªói m√°y ch·ªß' });
  }
};

// L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng
exports.getAllUsers = (req, res) => {
  let lastKey;
  try {
    lastKey = req.query.lastKey ? JSON.parse(req.query.lastKey) : undefined;
  } catch (e) {
    return res.status(400).json({ error: 'Tham s·ªë lastKey kh√¥ng h·ª£p l·ªá' });
  }

  const params = {
    TableName: TABLE,
  };

  docClient.scan(params, (err, data) => {
    if (err) return res.status(500).json({ error: 'L·ªói khi truy v·∫•n ng∆∞·ªùi d√πng' });

    res.json({
      users: data.Items,
      nextKey: data.LastEvaluatedKey ? JSON.stringify(data.LastEvaluatedKey) : null
    });
  });
};

// L·∫•y m·ªôt ng∆∞·ªùi d√πng
exports.getUser = (req, res) => {
  const { user_code } = req.params;
  const params = { TableName: TABLE, Key: { user_code } };

  docClient.get(params, (err, data) => {
    if (err) return res.status(500).json({ error: 'L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng' });
    if (!data.Item) return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

    res.json(data.Item);
  });
};


exports.updateUser = (req, res) => {
  const { user_code } = req.params;
  const { full_name, email, avatar_url, role, unit_code } = req.body;

  console.log('[üì•] Y√™u c·∫ßu c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:', req.body);

  if (!user_code) {
    return res.status(400).json({ error: 'Thi·∫øu user_code' });
  }

  const allowedFields = {
    full_name: full_name,
    email: email,
    avatar_url: avatar_url,
    role: role,
    unit_code: unit_code
  };

  const updateExpr = [];
  const exprAttrValues = {};
  const exprAttrNames = {};

  Object.entries(allowedFields).forEach(([key, value]) => {
    if (value !== undefined) {
      const attrName = `#${key}`;
      const attrValue = `:${key}`;
      updateExpr.push(`${attrName} = ${attrValue}`);
      exprAttrNames[attrName] = key;
      exprAttrValues[attrValue] = value;
    }
  });

  if (updateExpr.length === 0) {
    return res.status(400).json({ error: 'Kh√¥ng c√≥ tr∆∞·ªùng n√†o ƒë·ªÉ c·∫≠p nh·∫≠t' });
  }

  const params = {
    TableName: TABLE,
    Key: { user_code },
    UpdateExpression: 'set ' + updateExpr.join(', '),
    ExpressionAttributeNames: exprAttrNames,
    ExpressionAttributeValues: exprAttrValues,
    ReturnValues: 'ALL_NEW'
  };

  docClient.update(params, (err, data) => {
    if (err) {
      console.error('[‚ùå] L·ªói khi c·∫≠p nh·∫≠t:', err);
      return res.status(500).json({ error: 'C·∫≠p nh·∫≠t th·∫•t b·∫°i', details: err });
    }
    console.log('[‚úÖ] C·∫≠p nh·∫≠t th√†nh c√¥ng:', data.Attributes);
    res.json({ message: 'C·∫≠p nh·∫≠t th√†nh c√¥ng', updated: data.Attributes });
  });
};

// C·∫≠p nh·∫≠t avatar ri√™ng
exports.updateAvatar = (req, res) => {
  const { user_code } = req.params;
  const { avatar_url } = req.body;

  if (!avatar_url) return res.status(400).json({ error: 'Thi·∫øu avatar_url' });

  const params = {
    TableName: TABLE,
    Key: { user_code },
    UpdateExpression: 'set avatar_url = :a',
    ExpressionAttributeValues: {
      ':a': avatar_url
    },
    ReturnValues: 'ALL_NEW'
  };

  docClient.update(params, (err, data) => {
    if (err) return res.status(500).json({ error: 'L·ªói c·∫≠p nh·∫≠t avatar' });
    res.json({ message: 'C·∫≠p nh·∫≠t avatar th√†nh c√¥ng', updated: data.Attributes });
  });
};

// Xo√° ng∆∞·ªùi d√πng
exports.deleteUser = (req, res) => {
  const { user_code } = req.params;
  const params = { TableName: TABLE, Key: { user_code } };

  docClient.delete(params, err => {
    if (err) return res.status(500).json({ error: 'Xo√° ng∆∞·ªùi d√πng th·∫•t b·∫°i' });
    res.json({ message: 'Xo√° ng∆∞·ªùi d√πng th√†nh c√¥ng' });
  });
};
